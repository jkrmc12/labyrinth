"use strict";
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bl_1 = __importDefault(require("bl"));
const constants_1 = require("./constants");
exports.decodePacket = (packet) => {
    const message = new bl_1.default();
    let remainingPacket = packet;
    let escPosition = packet.indexOf(constants_1.ESC);
    while (escPosition > -1) {
        if (escPosition > 0) {
            const part = remainingPacket.shallowSlice(0, escPosition);
            message.append(part);
        }
        const nextByte = remainingPacket.get(escPosition + 1);
        if (nextByte === constants_1.ESC_END[0]) {
            message.append(constants_1.END);
        }
        else if (nextByte === constants_1.ESC_ESC[0]) {
            message.append(constants_1.ESC);
        }
        else {
            message.append(remainingPacket.slice(escPosition + 1, escPosition + 2));
        }
        remainingPacket = remainingPacket.shallowSlice(escPosition + 2);
        escPosition = remainingPacket.indexOf(constants_1.ESC);
    }
    message.append(remainingPacket);
    return message.slice();
};
function* _syncDecode(iterable) {
    let buffer = new bl_1.default();
    for (const data of iterable) {
        // search new data for the END byte
        const dataEndPosition = data.indexOf(constants_1.END);
        let endPosition = dataEndPosition === -1 ? -1 : buffer.length + dataEndPosition;
        buffer.append(data);
        // emit any packets we have
        while (endPosition > -1) {
            if (endPosition > 0) {
                const packetData = buffer.shallowSlice(0, endPosition);
                yield exports.decodePacket(packetData);
            }
            buffer = buffer.shallowSlice(endPosition + 1);
            endPosition = buffer.indexOf(constants_1.END);
        }
    }
    if (buffer.length > 0) {
        yield exports.decodePacket(buffer);
    }
}
function _asyncDecode(iterable) {
    return __asyncGenerator(this, arguments, function* _asyncDecode_1() {
        var e_1, _a;
        let buffer = new bl_1.default();
        try {
            for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {
                const data = iterable_1_1.value;
                // search new data for the END byte
                const dataEndPosition = data.indexOf(constants_1.END);
                let endPosition = dataEndPosition === -1 ? -1 : buffer.length + dataEndPosition;
                buffer.append(data);
                // emit any packets we have
                while (endPosition > -1) {
                    if (endPosition > 0) {
                        const packet = buffer.shallowSlice(0, endPosition);
                        yield yield __await(exports.decodePacket(packet));
                    }
                    buffer = buffer.shallowSlice(endPosition + 1);
                    endPosition = buffer.indexOf(constants_1.END);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (buffer.length > 0) {
            yield yield __await(exports.decodePacket(buffer));
        }
    });
}
function decode(iterable) {
    if (iterable[Symbol.asyncIterator]) {
        return _asyncDecode(iterable);
    }
    return _syncDecode(iterable);
}
exports.decode = decode;
