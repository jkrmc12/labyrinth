"use strict";
/*
 * Node.js module radiohead-serial
 *
 * Copyright (c) 2017 Peter Müller <peter@crycode.de> (https://crycode.de/)
 *
 * Node.js module for communication between some RadioHead nodes and Node.js using
 * the RH_Serial driver and the RHReliableDatagram manager of the RadioHead library.
 *
 *
 * RadioHead Library (http://www.airspayce.com/mikem/arduino/RadioHead/)
 * Copyright (c) 2014 Mike McCauley
 *
 * Port from native C/C++ code to TypeScript
 * Copyright (c) 2017 Peter Müller <peter@crycode.de> (https://crycode.de/)
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const mocha_typescript_1 = require("mocha-typescript");
const expect = require("expect.js");
const radiohead_serial_1 = require("../src/radiohead-serial");
//////////////////
// Check consts //
//////////////////
let CheckConsts = class CheckConsts {
    'version of package.json and exported version'() {
        const pkg = require('../../package.json');
        expect(pkg.version).to.be(radiohead_serial_1.version);
    }
    'RH_BROADCAST_ADDRESS 0xff'() {
        expect(radiohead_serial_1.RH_BROADCAST_ADDRESS).to.be(0xff);
    }
    'RH_FLAGS_RESERVED 0xf0'() {
        expect(radiohead_serial_1.RH_FLAGS_RESERVED).to.be(0xf0);
    }
    'RH_FLAGS_APPLICATION_SPECIFIC 0x0f'() {
        expect(radiohead_serial_1.RH_FLAGS_APPLICATION_SPECIFIC).to.be(0x0f);
    }
    'RH_FLAGS_NONE 0'() {
        expect(radiohead_serial_1.RH_FLAGS_NONE).to.be(0);
    }
    'RH_SERIAL_MAX_PAYLOAD_LEN 64'() {
        expect(radiohead_serial_1.RH_SERIAL_MAX_PAYLOAD_LEN).to.be(64);
    }
    'RH_SERIAL_HEADER_LEN 4'() {
        expect(radiohead_serial_1.RH_SERIAL_HEADER_LEN).to.be(4);
    }
    'RH_SERIAL_MAX_MESSAGE_LEN 60'() {
        expect(radiohead_serial_1.RH_SERIAL_MAX_MESSAGE_LEN).to.be(60);
    }
    'RH_FLAGS_ACK 0x80'() {
        expect(radiohead_serial_1.RH_FLAGS_ACK).to.be(0x80);
    }
    'RH_DEFAULT_TIMEOUT 200'() {
        expect(radiohead_serial_1.RH_DEFAULT_TIMEOUT).to.be(200);
    }
    'RH_DEFAULT_RETRIES 3'() {
        expect(radiohead_serial_1.RH_DEFAULT_RETRIES).to.be(3);
    }
};
__decorate([
    mocha_typescript_1.test
], CheckConsts.prototype, "version of package.json and exported version", null);
__decorate([
    mocha_typescript_1.test
], CheckConsts.prototype, "RH_BROADCAST_ADDRESS 0xff", null);
__decorate([
    mocha_typescript_1.test
], CheckConsts.prototype, "RH_FLAGS_RESERVED 0xf0", null);
__decorate([
    mocha_typescript_1.test
], CheckConsts.prototype, "RH_FLAGS_APPLICATION_SPECIFIC 0x0f", null);
__decorate([
    mocha_typescript_1.test
], CheckConsts.prototype, "RH_FLAGS_NONE 0", null);
__decorate([
    mocha_typescript_1.test
], CheckConsts.prototype, "RH_SERIAL_MAX_PAYLOAD_LEN 64", null);
__decorate([
    mocha_typescript_1.test
], CheckConsts.prototype, "RH_SERIAL_HEADER_LEN 4", null);
__decorate([
    mocha_typescript_1.test
], CheckConsts.prototype, "RH_SERIAL_MAX_MESSAGE_LEN 60", null);
__decorate([
    mocha_typescript_1.test
], CheckConsts.prototype, "RH_FLAGS_ACK 0x80", null);
__decorate([
    mocha_typescript_1.test
], CheckConsts.prototype, "RH_DEFAULT_TIMEOUT 200", null);
__decorate([
    mocha_typescript_1.test
], CheckConsts.prototype, "RH_DEFAULT_RETRIES 3", null);
CheckConsts = __decorate([
    mocha_typescript_1.suite('check consts')
], CheckConsts);
//# sourceMappingURL=consts-test.js.map