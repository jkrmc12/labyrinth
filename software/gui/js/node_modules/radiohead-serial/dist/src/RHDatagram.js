"use strict";
/*
 * Node.js module radiohead-serial
 *
 * RadioHead Library (http://www.airspayce.com/mikem/arduino/RadioHead/)
 * Copyright (c) 2014 Mike McCauley
 *
 * Port from native C/C++ code to TypeScript
 * Copyright (c) 2017 Peter MÃ¼ller <peter@crycode.de> (https://crycode.de/)
 */
/// <reference types="node" />
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const radiohead_serial_1 = require("./radiohead-serial");
/**
 * Manager class for addressed, unreliable messages.
 */
class RHDatagram extends events_1.EventEmitter {
    /**
     * Constructor
     * @param  {RH_Serial} driver      The used driver.
     * @param  {number}    thisAddress The address of this node.
     */
    constructor(driver, thisAddress) {
        super();
        this._driver = driver;
        this._thisAddress = thisAddress;
    }
    /**
     * Initialise this instance and the driver connected to it.
     * @return {Promise} Promise which will be resolved if the init of the driver is done.
     */
    init() {
        return this._driver.init()
            .then(() => {
            this.setThisAddress(this._thisAddress);
            // emit recv event from driver on this class
            this._driver.on('recv', (msg) => {
                this.emit('recv', msg);
            });
        });
    }
    /**
     * Sets the address of this node. Defaults to 0.
     * This will be used to set the FROM address of all messages sent by this node.
     * In a conventional multinode system, all nodes will have a unique address.
     * @param {number} thisAddress The address of this node.
     */
    setThisAddress(thisAddress) {
        this._driver.setThisAddress(thisAddress);
        // Use this address in the transmitted FROM header
        this.setHeaderFrom(thisAddress);
        this._thisAddress = thisAddress;
    }
    /**
     * Sends a message to the node(s) with the given address.
     * RH_BROADCAST_ADDRESS is a valid address which will cause the message to be
     * accepted by all RHDatagram nodes within range.
     * @param  {Buffer}  data    The buffer containing the data to send.
     * @param  {number}  len     Number of bytes from the buffer to send.
     * @param  {number}  address The address to send the message to.
     * @return {Promise}         Promise which will be resolved if sending is completed.
     */
    sendto(data, len, address) {
        this.setHeaderTo(address);
        return this._driver.send(data, len);
    }
    /**
     * Returns the address of this node.
     * @return {number} The address of this node.
     */
    thisAddress() {
        return this._thisAddress;
    }
    /**
     * Sets the TO header to be sent in all subsequent messages.
     * @param {number} to The new TO header value.
     */
    setHeaderTo(to) {
        this._driver.setHeaderTo(to);
    }
    /**
     * Sets the FROM header to be sent in all subsequent messages.
     * @param {number} from The new FROM header value.
     */
    setHeaderFrom(from) {
        this._driver.setHeaderFrom(from);
    }
    /**
     * Sets the ID header to be sent in all subsequent messages.
     * @param  {number} id The new ID header value.
     */
    setHeaderId(id) {
        this._driver.setHeaderId(id);
    }
    /**
     * Sets and clears bits in the FLAGS header to be sent in all subsequent messages.
     * @param  {number} set   Bitmask of bits to be set.
     * @param  {number} clear Bitmask of flags to clear.
     */
    setHeaderFlags(set, clear = radiohead_serial_1.RH_FLAGS_APPLICATION_SPECIFIC) {
        this._driver.setHeaderFlags(set, clear);
    }
}
exports.RHDatagram = RHDatagram;
//# sourceMappingURL=RHDatagram.js.map